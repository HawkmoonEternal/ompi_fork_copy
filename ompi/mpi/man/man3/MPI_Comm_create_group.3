.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_Comm_create_group" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Comm_create_group\f[] \- Creates a new communicator.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>

int\ MPI_Comm_create_group(MPI_Comm\ comm,\ MPI_Group\ group,\ int\ tag,\ MPI_Comm\ *newcomm)
\f[]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]

MPI_COMM_CREATE_GROUP(COMM,\ GROUP,\ TAG,\ NEWCOMM,\ IERROR)
\ \ \ \ INTEGER\ COMM,\ GROUP,\ TAG,\ NEWCOMM,\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08

MPI_Comm_create_group(comm,\ group,\ tag,\ newcomm,\ ierror)
\ \ \ \ TYPE(MPI_Comm),\ INTENT(IN)\ ::\ comm
\ \ \ \ TYPE(MPI_Group),\ INTENT(IN)\ ::\ group
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ tag
\ \ \ \ TYPE(MPI_Comm),\ INTENT(OUT)\ ::\ newcomm
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]comm\f[] : Communicator (handle).
.IP \[bu] 2
\f[C]group\f[] : Group, which is a subset of the group of comm (handle).
.IP \[bu] 2
\f[C]tag\f[] : Tag (integer).
.SH Output Parameters
.IP \[bu] 2
\f[C]newcomm\f[] : New communicator (handle).
.IP \[bu] 2
\f[C]IERROR\f[] : Fortran only: Error status (integer).
.SH Description
.PP
\f[C]MPI_Comm_create_group\f[] is similar to \f[C]MPI_Comm_create\f[];
however, \f[C]MPI_Comm_create\f[] must be called by all processes in the
\f[C]group\f[] of \f[C]comm\f[], whereas \f[C]MPI_Comm_create_group\f[]
must be called by all processes in \f[C]group\f[], which is a subgroup
of the \f[C]group\f[] of \f[C]comm\f[].
In addition, \f[C]MPI_Comm_create_group\f[] requires that \f[C]comm\f[]
is an intracommunicator.
\f[C]MPI_Comm_create_group\f[] returns a new intracommunicator,
\f[C]newcomm\f[], for which the \f[C]group\f[] argument defines the
communication \f[C]group\f[].
No cached information propagates from \f[C]comm\f[] to \f[C]newcomm\f[].
Each process must provide a \f[C]group\f[] argument that is a
sub\f[C]group\f[] of the \f[C]group\f[] associated with \f[C]comm\f[];
this could be \f[C]MPI_GROUP_EMPTY\f[].
If a non\-empty \f[C]group\f[] is specified, then all processes in that
\f[C]group\f[] must call the function, and each of these processes must
provide the same arguments, including a \f[C]group\f[] that contains the
same members with the same ordering.
Otherwise the call is erroneous.
If the calling process is a member of the \f[C]group\f[] given as the
\f[C]group\f[] argument, then \f[C]newcomm\f[] is a communicator with
\f[C]group\f[] as its associated \f[C]group\f[].
If the calling process is not a member of \f[C]group\f[], e.g.,
\f[C]group\f[] is \f[C]MPI_GROUP_EMPTY\f[], then the call is a local
operation and \f[C]MPI_COMM_NULL\f[] is returned as \f[C]newcomm\f[].
.SH Notes
.PP
\f[C]MPI_Comm_create_group\f[] provides a means of making a subset of
processes for the purpose of separate MIMD computation, with separate
communication space.
\f[C]newcomm\f[], which is created by \f[C]MPI_Comm_create_group\f[],
can be used in subsequent calls to \f[C]MPI_Comm_create_group\f[] (or
other communicator constructors) to further subdivide a computation into
parallel sub\-computations.
A more general service is provided by \f[C]MPI_Comm_split\f[].
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.SH See Also
.PP
\f[C]MPI_Comm_create\f[](3)
