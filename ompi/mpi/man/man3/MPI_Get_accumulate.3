.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_Get_accumulate" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Get_accumulate\f[], \f[C]MPI_Rget_accumulate\f[] \- Combines
the contents of the origin buffer with that of a target buffer and
returns the target buffer value.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>

int\ MPI_Get_accumulate(const\ void\ *origin_addr,\ int\ origin_count,
\ \ \ \ MPI_Datatype\ origin_datatype,\ void\ *result_addr,
\ \ \ \ int\ result_count,\ MPI_Datatype\ result_datatype,
\ \ \ \ int\ target_rank,\ MPI_Aint\ target_disp,\ int\ target_count,
\ \ \ \ MPI_Datatype\ target_datatype,\ MPI_Op\ op,\ MPI_Win\ win)

int\ MPI_Rget_accumulate(const\ void\ *origin_addr,\ int\ origin_count,
\ \ \ \ MPI_Datatype\ origin_datatype,\ void\ *result_addr,
\ \ \ \ int\ result_count,\ MPI_Datatype\ result_datatype,
\ \ \ \ int\ target_rank,\ MPI_Aint\ target_disp,\ int\ target_count,
\ \ \ \ MPI_Datatype\ target_datatype,\ MPI_Op\ op,\ MPI_Win\ win,
\ \ \ \ MPI_Request\ *request)
\f[]
.fi
.SS Fortran Syntax (See Fortran 77 Notes)
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]

MPI_GET_ACCUMULATE(ORIGIN_ADDR,\ ORIGIN_COUNT,\ ORIGIN_DATATYPE,\ RESULT_ADDR,
\ \ \ \ \ \ \ \ RESULT_COUNT,\ RESULT_DATATYPE,\ TARGET_RANK,\ TARGET_DISP,\ TARGET_COUNT,
\ \ \ \ \ \ \ \ TARGET_DATATYPE,\ OP,\ WIN,\ IERROR)
\ \ \ \ <type>\ ORIGIN_ADDR,\ RESULT_ADDR(*)
\ \ \ \ INTEGER(KIND=MPI_ADDRESS_KIND)\ TARGET_DISP
\ \ \ \ INTEGER\ ORIGIN_COUNT,\ ORIGIN_DATATYPE,\ TARGET_COUNT,\ TARGET_DATATYPE,
\ \ \ \ \ \ \ \ TARGET_RANK,\ TARGET_COUNT,\ TARGET_DATATYPE,\ OP,\ WIN,\ IERROR

MPI_RGET_ACCUMULATE(ORIGIN_ADDR,\ ORIGIN_COUNT,\ ORIGIN_DATATYPE,\ RESULT_ADDR,
\ \ \ \ \ \ \ \ RESULT_COUNT,\ RESULT_DATATYPE,\ TARGET_RANK,\ TARGET_DISP,\ TARGET_COUNT,
\ \ \ \ \ \ \ \ TARGET_DATATYPE,\ OP,\ WIN,\ REQUEST,\ IERROR)
\ \ \ \ <type>\ ORIGIN_ADDR,\ RESULT_ADDR(*)
\ \ \ \ INTEGER(KIND=MPI_ADDRESS_KIND)\ TARGET_DISP
\ \ \ \ INTEGER\ ORIGIN_COUNT,\ ORIGIN_DATATYPE,\ TARGET_COUNT,\ TARGET_DATATYPE,
\ \ \ \ \ \ \ \ TARGET_RANK,\ TARGET_COUNT,\ TARGET_DATATYPE,\ OP,\ WIN,\ REQUEST,\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08

MPI_Get_accumulate(origin_addr,\ origin_count,\ origin_datatype,\ result_addr,
\ \ \ \ \ \ \ \ result_count,\ result_datatype,\ target_rank,\ target_disp,
\ \ \ \ \ \ \ \ target_count,\ target_datatype,\ op,\ win,\ ierror)
\ \ \ \ TYPE(*),\ DIMENSION(..),\ INTENT(IN)\ ::\ origin_addr
\ \ \ \ TYPE(*),\ DIMENSION(..)\ ::\ result_addr
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ origin_count,\ result_count,\ target_rank,\ target_count
\ \ \ \ TYPE(MPI_Datatype),\ INTENT(IN)\ ::\ origin_datatype,\ target_datatype,\ result_datatype
\ \ \ \ INTEGER(KIND=MPI_ADDRESS_KIND),\ INTENT(IN)\ ::\ target_dist
\ \ \ \ TYPE(MPI_Op),\ INTENT(IN)\ ::\ op
\ \ \ \ TYPE(MPI_Win),\ INTENT(IN)\ ::\ win
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror

MPI_Rget_accumulate(origin_addr,\ origin_count,\ origin_datatype,
\ \ \ \ \ \ \ \ result_addr,\ result_count,\ result_datatype,\ target_rank,
\ \ \ \ \ \ \ \ target_disp,\ target_count,\ target_datatype,\ op,\ win,\ request,
\ \ \ \ \ \ \ \ ierror)
\ \ \ \ TYPE(*),\ DIMENSION(..),\ INTENT(IN)\ ::\ origin_addr
\ \ \ \ TYPE(*),\ DIMENSION(..)\ ::\ result_addr
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ origin_count,\ result_count,\ target_rank,\ target_count
\ \ \ \ TYPE(MPI_Datatype),\ INTENT(IN)\ ::\ origin_datatype,\ target_datatype,\ result_datatype
\ \ \ \ INTEGER(KIND=MPI_ADDRESS_KIND),\ INTENT(IN)\ ::\ target_dist
\ \ \ \ TYPE(MPI_Op),\ INTENT(IN)\ ::\ op
\ \ \ \ TYPE(MPI_Win),\ INTENT(IN)\ ::\ win
\ \ \ \ TYPE(MPI_Request),\ INTENT(OUT)\ ::\ request
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]origin_addr\f[] : Initial address of buffer (choice).
.IP \[bu] 2
\f[C]origin_count\f[] : Number of entries in buffer (nonnegative
integer).
.IP \[bu] 2
\f[C]origin_datatype\f[] : Data type of each buffer entry (handle).
.IP \[bu] 2
\f[C]result_addr\f[] : Initial address of result buffer (choice).
.IP \[bu] 2
\f[C]result_count\f[] : Number of entries in result buffer (nonnegative
integer).
.IP \[bu] 2
\f[C]result_datatype\f[] : Data type of each result buffer entry
(handle).
.IP \[bu] 2
\f[C]target_rank\f[] : Rank of target (nonnegative integer).
.IP \[bu] 2
\f[C]target_disp\f[] : Displacement from start of window to beginning of
target buffer (nonnegative integer).
.IP \[bu] 2
\f[C]target_count\f[] : Number of entries in target buffer (nonnegative
integer).
.IP \[bu] 2
\f[C]target_datatype\f[] : Data type of each entry in target buffer
(handle).
.IP \[bu] 2
\f[C]op\f[] : Reduce operation (handle).
.IP \[bu] 2
\f[C]win\f[] : Window object (handle).
.SH Output Parameter
.IP \[bu] 2
\f[C]MPI_Rget_accumulate\f[]: RMA request
.IP \[bu] 2
\f[C]IERROR\f[] : Fortran only: Error status (integer).
.SH Description
.PP
\f[C]MPI_Get_accumulate\f[] is a function used for one\-sided MPI
communication that adds the contents of the origin buffer (as defined by
\f[C]origin_addr\f[], \f[C]origin_count\f[], and
\f[C]origin_datatype\f[]) to the buffer specified by the arguments
\f[C]target_count\f[] and \f[C]target_datatype\f[], at offset
\f[C]target_disp\f[], in the target window specified by
\f[C]target_rank\f[] and \f[C]win\f[], using the operation \f[C]op\f[].
\f[C]MPI_Get_accumulate\f[] returns in the result buffer
\f[C]result_addr\f[] the contents of the target buffer before the
accumulation.
.PP
Any of the predefined operations for \f[C]MPI_Reduce\f[], as well as
\f[C]MPI_NO_OP,\f[] can be used.
User\-defined functions cannot be used.
For example, if \f[C]op\f[] is \f[C]MPI_SUM\f[], each element of the
origin buffer is added to the corresponding element in the target,
replacing the former value in the target.
.PP
Each datatype argument must be a predefined data type or a derived data
type, where all basic components are of the same predefined data type.
Both datatype arguments must be constructed from the same predefined
data type.
The operation \f[C]op\f[] applies to elements of that predefined type.
The \f[C]target_datatype\f[] argument must not specify overlapping
entries, and the target buffer must fit in the target window.
.PP
A new predefined operation, \f[C]MPI_REPLACE\f[], is defined.
It corresponds to the associative function f(a, b) =b; that is, the
current value in the target memory is replaced by the value supplied by
the origin.
.PP
A new predefined operation, \f[C]MPI_NO_OP\f[], is defined.
It corresponds to the assiciative function f(a, b) = a; that is the
current value in the target memory is returned in the result buffer at
the origin and no operation is performed on the target buffer.
.PP
\f[C]MPI_Rget_accumulate\f[] is similar to \f[C]MPI_Get_accumulate\f[],
except that it allocates a communication request object and associates
it with the request handle (the argument request) that can be used to
wait or test for completion.
The completion of an \f[C]MPI_Rget_accumulate\f[] operation indicates
that the data is available in the result buffer and the origin buffer is
free to be updated.
It does not indicate that the operation has been completed at the target
window.
.SH Fortran 77 Notes
.PP
The MPI standard prescribes portable Fortran syntax for the
\f[C]TARGET_DISP\f[] argument only for Fortran 90.
FORTRAN 77 users may use the non\-portable syntax
.IP
.nf
\f[C]
INTEGER*MPI_ADDRESS_KIND\ TARGET_DISP
\f[]
.fi
.PP
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH Notes
.PP
The generic functionality of \f[C]MPI_Get_accumulate\f[] might limit the
performance of fetch\-and\-increment or fetch\-and\-add calls that might
be supported by special hardware operations.
\f[C]MPI_Fetch_and_op\f[] thus allows for a fast implementation of a
commonly used subset of the functionality of
\f[C]MPI_Get_accumulate\f[].
.PP
\f[C]MPI_Get\f[] is a special case of \f[C]MPI_Get_accumulate\f[], with
the operation \f[C]MPI_NO_OP\f[].
Note, however, that \f[C]MPI_Get\f[] and \f[C]MPI_Get_accumulate\f[]
have different constraints on concurrent updates.
.PP
It is the user's responsibility to guarantee that, when using the
accumulate functions, the target displacement argument is such that
accesses to the window are properly aligned according to the data type
arguments in the call to the \f[C]MPI_Get_accumulate\f[] function.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.SH See Also
.PP
\f[C]MPI_Put\f[](3) \f[C]MPI_Get\f[](3) \f[C]MPI_Accumulate\f[](3)
\f[C]MPI_Fetch_and_op\f[](3) \f[C]MPI_Reduce\f[](3)
