.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_Bsend" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Bsend\f[] \- Basic send with user\-specified buffering.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>
int\ MPI_Bsend(const\ void\ *buf,\ int\ count,\ MPI_Datatype\ datatype,
\ \ \ int\ dest,\ int\ tag,\ MPI_Comm\ comm)
\f[]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]

MPI_BSEND(BUF,\ COUNT,DATATYPE,\ DEST,\ TAG,\ COMM,\ IERROR)
\ \ \ \ <type>\ \ BUF(*)
\ \ \ \ INTEGER\ COUNT,\ DATATYPE,\ DEST,\ TAG,\ COMM,\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08
MPI_Bsend(buf,\ count,\ datatype,\ dest,\ tag,\ comm,\ ierror)
\ \ \ \ TYPE(*),\ DIMENSION(..),\ INTENT(IN)\ ::\ buf
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ count,\ dest,\ tag
\ \ \ \ TYPE(MPI_Datatype),\ INTENT(IN)\ ::\ datatype
\ \ \ \ TYPE(MPI_Comm),\ INTENT(IN)\ ::\ comm
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]buf\f[] : Initial address of send buffer (choice).
.IP \[bu] 2
\f[C]count\f[] : Number of entries in send buffer (nonnegative integer).
.IP \[bu] 2
\f[C]datatype\f[] : Datatype of each send buffer element (handle).
.IP \[bu] 2
\f[C]dest\f[] : Rank of destination (integer).
.IP \[bu] 2
\f[C]tag\f[] : Message tag (integer).
.IP \[bu] 2
\f[C]comm\f[] : Communicator (handle).
.SH Output Parameters
.IP \[bu] 2
\f[C]IERROR\f[] : Fortran only: Error status (integer).
.SH Description
.PP
\f[C]MPI_Bsend\f[] performs a buffered\-mode, blocking send.
.SH Notes
.PP
This send is provided as a convenience function; it allows the user to
send messages without worrying about where they are buffered (because
the user must have provided buffer space with
\f[C]MPI_Buffer_attach\f[]).
.PP
In deciding how much buffer space to allocate, remember that the buffer
space is not available for reuse by subsequent \f[C]MPI_Bsend\f[]s
unless you are certain that the message has been received (not just that
it should have been received).
For example, this code does not allocate enough buffer space:
.IP
.nf
\f[C]
MPI_Buffer_attach(\ b,\ n*sizeof(double)\ +\ MPI_BSEND_OVERHEAD\ );
for\ (i=0;\ i<m;\ i++)\ {
\ \ \ \ MPI_Bsend(\ buf,\ n,\ MPI_DOUBLE,\ ...\ );
}
\f[]
.fi
.PP
because only enough buffer space is provided for a single send, and the
loop may start a second \f[C]MPI_Bsend\f[] before the first is done
making use of the buffer.
.PP
In C, you can force the messages to be delivered by
\f[C]MPI_Buffer_detach(\ &b,\ &n\ );\f[]
\f[C]MPI_Buffer_attach(\ b,\ n\ );\f[] (The \f[C]MPI_Buffer_detach\f[]
will not complete until all buffered messages are delivered.)
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value;
C routines as the value of the function and Fortran routines in the last
argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
