.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_Group_excl" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Group_excl\f[] \- Produces a group by reordering an existing
group and taking only unlisted members.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>

int\ MPI_Group_excl(MPI_Group\ group,\ int\ n,\ const\ int\ ranks[],
\ \ \ \ MPI_Group\ *newgroup)
\f[]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]

MPI_GROUP_EXCL(GROUP,\ N,\ RANKS,\ NEWGROUP,\ IERROR)
\ \ \ \ INTEGER\ GROUP,\ N,\ RANKS(*),\ NEWGROUP,\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08

MPI_Group_excl(group,\ n,\ ranks,\ newgroup,\ ierror)
\ \ \ \ TYPE(MPI_Group),\ INTENT(IN)\ ::\ group
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ n,\ ranks(n)
\ \ \ \ TYPE(MPI_Group),\ INTENT(OUT)\ ::\ newgroup
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]group\f[] : Group (handle).
.IP \[bu] 2
\f[C]n\f[] : Number of elements in array ranks (integer).
.IP \[bu] 2
\f[C]ranks\f[] : Array of integer ranks in group not to appear in
newgroup.
.SH Output Parameters
.IP \[bu] 2
\f[C]newgroup\f[] : New group derived from above, preserving the order
defined by group (handle).
.IP \[bu] 2
\f[C]IERROR\f[] : Fortran only: Error status (integer).
.SH Description
.PP
The function \f[C]MPI_Group_excl\f[] creates a \f[C]group\f[] of
processes \f[C]newgroup\f[] that is obtained by deleting from
\f[C]group\f[] those processes with ranks \f[C]ranks[0]\f[], \&...
\f[C]ranks[n\-1]\f[].
The ordering of processes in \f[C]newgroup\f[] is identical to the
ordering in \f[C]group\f[].
Each of the n elements of ranks must be a valid rank in \f[C]group\f[]
and all elements must be distinct; otherwise, the call is erroneous.
If \f[C]n\f[] = 0, then \f[C]newgroup\f[] is identical to
\f[C]group\f[].
.SH Note
.PP
Currently, each of the ranks to exclude must be a valid rank in the
\f[C]group\f[] and all elements must be distinct or the function is
erroneous.
This restriction is per the draft.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.SH See Also
.PP
\f[C]MPI_Group_range_excl\f[](3) \f[C]MPI_Group_free\f[](3)
