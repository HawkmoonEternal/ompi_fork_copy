.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_File_write_ordered_begin" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_File_write_ordered_begin\f[] \- Writes a file at a location
specified by a shared file pointer; beginning part of a split collective
routine (nonblocking).
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>

int\ MPI_File_write_ordered_begin(MPI_File\ fh,\ const\ void\ *buf,
\ \ \ \ int\ count,\ MPI_Datatype\ datatype)
\f[]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]

MPI_FILE_WRITE_ORDERED_BEGIN(FH,\ BUF,\ COUNT,\ DATATYPE,\ IERROR)
\ \ \ \ <type>\ \ BUF(*)
\ \ \ \ INTEGER\ FH,\ COUNT,\ DATATYPE,\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08

MPI_File_write_ordered_begin(fh,\ buf,\ count,\ datatype,\ ierror)
\ \ \ \ TYPE(MPI_File),\ INTENT(IN)\ ::\ fh
\ \ \ \ TYPE(*),\ DIMENSION(..),\ INTENT(IN),\ ASYNCHRONOUS\ ::\ buf
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ count
\ \ \ \ TYPE(MPI_Datatype),\ INTENT(IN)\ ::\ datatype
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH Input/Output Parameter
.IP \[bu] 2
\f[C]fh\f[] : File handle (handle).
.SH Input Parameters
.IP \[bu] 2
\f[C]buf\f[] : Initial address of buffer (choice).
.IP \[bu] 2
\f[C]count\f[] : Number of elements in buffer (integer).
.IP \[bu] 2
\f[C]datatype\f[] : Data type of each buffer element (handle).
.SH Output Parameter
.IP \[bu] 2
\f[C]IERROR\f[] : Fortran only: Error status (integer).
.SH Description
.PP
\f[C]MPI_File_write_ordered_begin\f[] is the beginning part of a split
collective, nonblocking routine that must be called by all processes in
the communicator group associated with the file handle \f[C]fh\f[].
Each process may pass different argument values for the
\f[C]datatype\f[] and \f[C]count\f[] arguments.
After all processes of the group have issued their respective calls,
each process attempts to write, into the file associated with
\f[C]fh\f[], a total number of \f[C]count\f[] data items having
\f[C]datatype\f[] type contained in the user's buffer \f[C]buf\f[].
For each process, the location in the file at which data is written is
the position at which the shared file pointer would be after all
processes whose ranks within the group are less than that of this
process had written their data.
.SH Notes
.PP
All the nonblocking collective routines for data access are
\[lq]split\[rq] into two routines, each with _begin or _end as a suffix.
These split collective routines are subject to the semantic rules
described in Section 9.4.5 of the MPI\-2 standard.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
For MPI I/O function errors, the default error handler is set to
\f[C]MPI_ERRORS_RETURN\f[].
The error handler may be changed with \f[C]MPI_File_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_ARE_FATAL\f[] may be used
to make I/O errors fatal.
Note that MPI does not guarantee that an MPI program can continue past
an error.
