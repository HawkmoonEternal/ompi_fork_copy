.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_Bcast" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH NAME
.PP
\f[C]MPI_Bcast\f[], \f[C]MPI_Ibcast\f[] \- Broadcasts a message from the
process with rank \f[I]root\f[] to all other processes of the group.
.SH SYNTAX
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>
int\ MPI_Bcast(void\ *buffer,\ int\ count,\ MPI_Datatype\ datatype,
\ \ \ \ int\ root,\ MPI_Comm\ comm)

int\ MPI_Ibcast(void\ *buffer,\ int\ count,\ MPI_Datatype\ datatype,
\ \ \ \ int\ root,\ MPI_Comm\ comm,\ MPI_Request\ *request)
\f[]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]
MPI_BCAST(BUFFER,\ COUNT,\ DATATYPE,\ ROOT,\ COMM,\ IERROR)
\ \ \ \ <type>\ \ BUFFER(*)
\ \ \ \ INTEGER\ COUNT,\ DATATYPE,\ ROOT,\ COMM,\ IERROR

MPI_IBCAST(BUFFER,\ COUNT,\ DATATYPE,\ ROOT,\ COMM,\ REQUEST,\ IERROR)
\ \ \ \ <type>\ \ BUFFER(*)
\ \ \ \ INTEGER\ COUNT,\ DATATYPE,\ ROOT,\ COMM,\ REQUEST,\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08
MPI_Bcast(buffer,\ count,\ datatype,\ root,\ comm,\ ierror)
\ \ \ \ TYPE(*),\ DIMENSION(..)\ ::\ buffer
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ count,\ root
\ \ \ \ TYPE(MPI_Datatype),\ INTENT(IN)\ ::\ datatype
\ \ \ \ TYPE(MPI_Comm),\ INTENT(IN)\ ::\ comm
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror

MPI_Ibcast(buffer,\ count,\ datatype,\ root,\ comm,\ request,\ ierror)
\ \ \ \ TYPE(*),\ DIMENSION(..),\ ASYNCHRONOUS\ ::\ buffer
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ count,\ root
\ \ \ \ TYPE(MPI_Datatype),\ INTENT(IN)\ ::\ datatype
\ \ \ \ TYPE(MPI_Comm),\ INTENT(IN)\ ::\ comm
\ \ \ \ TYPE(MPI_Request),\ INTENT(OUT)\ ::\ request
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH INPUT/OUTPUT PARAMETERS
.IP \[bu] 2
\f[C]buffer\f[]: Starting address of buffer (choice).
.IP \[bu] 2
\f[C]count\f[]: Number of entries in buffer (integer).
.IP \[bu] 2
\f[C]datatype\f[]: Data type of buffer (handle).
.IP \[bu] 2
\f[C]root\f[]: Rank of broadcast root (integer).
.IP \[bu] 2
\f[C]comm\f[]: Communicator (handle).
.SH OUTPUT PARAMETERS
.IP \[bu] 2
\f[C]request\f[]: Request (handle, non\-blocking only).
.IP \[bu] 2
\f[C]IERROR\f[]: Fortran only: Error status (integer).
.SH DESCRIPTION
.PP
\f[C]MPI_Bcast\f[] broadcasts a message from the process with rank root
to all processes of the group, itself included.
It is called by all members of group using the same arguments for
\f[C]comm\f[], \f[C]root\f[].
On return, the contents of root's communication buffer has been copied
to all processes.
.PP
General, derived datatypes are allowed for datatype.
The type signature of count, datatype on any process must be equal to
the type signature o f count, datatype at the root.
This implies that the amount of data sent must be equal to the amount
received, pairwise between each process and the root.
\f[C]MPI_Bcast\f[] and all other data\-movement collective routines make
this restriction.
Distinct type maps between sender and receiver are still allowed.
.PP
\f[B]Example:\f[] Broadcast 100 ints from process 0 to every process in
the group.
.IP
.nf
\f[C]
MPI_Comm\ comm;
int\ array[100];
int\ root=0;
//...
MPI_Bcast(\ array,\ 100,\ MPI_INT,\ root,\ comm);
\f[]
.fi
.PP
As in many of our sample code fragments, we assume that some of the
variables (such as comm in the example above) have been assigned
appropriate values.
.SH WHEN COMMUNICATOR IS AN INTER\-COMMUNICATOR
.PP
When the communicator is an inter\-communicator, the root process in the
first group broadcasts data to all the processes in the second group.
The first group defines the root process.
That process uses \f[C]MPI_ROOT\f[] as the value of its \f[C]root\f[]
argument.
The remaining processes use \f[C]MPI_PROC_NULL\f[] as the value of their
\f[C]root\f[] argument.
All processes in the second group use the rank of that root process in
the first group as the value of their \f[C]root\f[] argument.
The receive buffer arguments of the processes in the second group must
be consistent with the send buffer argument of the root process in the
first group.
.SH NOTES
.PP
This function does not support the in\-place option.
.SH ERRORS
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
