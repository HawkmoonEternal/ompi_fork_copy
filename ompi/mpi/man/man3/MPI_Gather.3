.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_Gather" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Gather\f[], \f[C]MPI_Igather\f[] \- Gathers values from a group
of processes.
.SH Synopsis
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>

int\ MPI_Gather(const\ void\ *sendbuf,\ int\ sendcount,\ MPI_Datatype\ sendtype,
\ \ \ \ void\ *recvbuf,\ int\ recvcount,\ MPI_Datatype\ recvtype,\ int\ root,
\ \ \ \ MPI_Comm\ comm)

int\ MPI_Igather(const\ void\ *sendbuf,\ int\ sendcount,\ MPI_Datatype\ sendtype,
\ \ \ \ void\ *recvbuf,\ int\ recvcount,\ MPI_Datatype\ recvtype,\ int\ root,
\ \ \ \ MPI_Comm\ comm,\ MPI_Request\ *request)
\f[]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]

MPI_GATHER(SENDBUF,\ SENDCOUNT,\ SENDTYPE,\ RECVBUF,\ RECVCOUNT,
\ \ \ \ \ \ \ \ RECVTYPE,\ ROOT,\ COMM,\ IERROR)
\ \ \ \ <type>\ \ SENDBUF(*),\ RECVBUF(*)
\ \ \ \ INTEGER\ SENDCOUNT,\ SENDTYPE,\ RECVCOUNT,\ RECVTYPE,\ ROOT
\ \ \ \ INTEGER\ COMM,\ IERROR

MPI_IGATHER(SENDBUF,\ SENDCOUNT,\ SENDTYPE,\ RECVBUF,\ RECVCOUNT,
\ \ \ \ \ \ \ \ RECVTYPE,\ ROOT,\ COMM,\ REQUEST,\ IERROR)
\ \ \ \ <type>\ \ SENDBUF(*),\ RECVBUF(*)
\ \ \ \ INTEGER\ SENDCOUNT,\ SENDTYPE,\ RECVCOUNT,\ RECVTYPE,\ ROOT
\ \ \ \ INTEGER\ COMM,\ REQUEST,\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08

MPI_Gather(sendbuf,\ sendcount,\ sendtype,\ recvbuf,\ recvcount,\ recvtype,
\ \ \ \ \ \ \ \ root,\ comm,\ ierror)
\ \ \ \ TYPE(*),\ DIMENSION(..),\ INTENT(IN)\ ::\ sendbuf
\ \ \ \ TYPE(*),\ DIMENSION(..)\ ::\ recvbuf
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ sendcount,\ recvcount,\ root
\ \ \ \ TYPE(MPI_Datatype),\ INTENT(IN)\ ::\ sendtype,\ recvtype
\ \ \ \ TYPE(MPI_Comm),\ INTENT(IN)\ ::\ comm
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror

MPI_Igather(sendbuf,\ sendcount,\ sendtype,\ recvbuf,\ recvcount,\ recvtype,
\ \ \ \ \ \ \ \ root,\ comm,\ request,\ ierror)
\ \ \ \ TYPE(*),\ DIMENSION(..),\ INTENT(IN),\ ASYNCHRONOUS\ ::\ sendbuf
\ \ \ \ TYPE(*),\ DIMENSION(..),\ ASYNCHRONOUS\ ::\ recvbuf
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ sendcount,\ recvcount,\ root
\ \ \ \ TYPE(MPI_Datatype),\ INTENT(IN)\ ::\ sendtype,\ recvtype
\ \ \ \ TYPE(MPI_Comm),\ INTENT(IN)\ ::\ comm
\ \ \ \ TYPE(MPI_Request),\ INTENT(OUT)\ ::\ request
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]sendbuf\f[] : Starting address of send buffer (choice).
.IP \[bu] 2
\f[C]sendcount\f[] : Number of elements in send buffer (integer).
.IP \[bu] 2
\f[C]sendtype\f[] : Datatype of send buffer elements (handle).
.IP \[bu] 2
\f[C]recvcount\f[] : Number of elements for any single receive (integer,
significant only at root).
.IP \[bu] 2
\f[C]recvtype\f[] : Datatype of recvbuffer elements (handle, significant
only at root).
.IP \[bu] 2
\f[C]root\f[] : Rank of receiving process (integer).
.IP \[bu] 2
\f[C]comm\f[] : Communicator (handle).
.SH Output Parameters
.IP \[bu] 2
\f[C]recvbuf\f[] : Address of receive buffer (choice, significant only
at root).
.IP \[bu] 2
\f[C]request\f[] : Request (handle, non\-blocking only).
.IP \[bu] 2
\f[C]IERROR\f[] : Fortran only: Error status (integer).
.SH Description
.PP
Each process (root process included) sends the contents of its send
buffer to the root process.
The root process receives the messages and stores them in rank order.
The outcome is as if each of the n processes in the group (including the
root process) had executed a call to
.IP
.nf
\f[C]
MPI_Send(sendbuf,\ sendcount,\ sendtype,\ root,\ ...)
\f[]
.fi
.PP
and the root had executed n calls to
.IP
.nf
\f[C]
MPI_Recv(recfbuf\ +\ i\ *\ recvcount\ *\ extent(recvtype),\ recvcount,\ recvtype,\ i,\ ...)
\f[]
.fi
.PP
where extent(recvtype) is the type extent obtained from a call to
\f[C]MPI_Type_extent()\f[].
.PP
An alternative description is that the n messages sent by the processes
in the group are concatenated in rank order, and the resulting message
is received by the root as if by a call to
\f[C]MPI_RECV(recvbuf,\ recvcount*\ n,\ recvtype,\ ...\ )\f[].
.PP
The receive buffer is ignored for all nonroot processes.
.PP
General, derived datatypes are allowed for both sendtype and recvtype.
The type signature of \f[C]sendcount\f[], \f[C]sendtype\f[] on process i
must be equal to the type signature of \f[C]recvcount\f[],
\f[C]recvtype\f[] at the root.
This implies that the amount of data sent must be equal to the amount of
data received, pairwise between each process and the root.
Distinct type maps between sender and receiver are still allowed.
.PP
All arguments to the function are significant on process root, while on
other processes, only arguments \f[C]sendbuf\f[], \f[C]sendcount\f[],
\f[C]sendtype\f[], \f[C]root\f[], \f[C]comm\f[] are significant.
The arguments \f[C]root\f[] and \f[C]comm\f[] must have identical values
on all processes.
.PP
The specification of counts and types should not cause any location on
the root to be written more than once.
Such a call is erroneous.
Note that the \f[C]recvcount\f[] argument at the root indicates the
number of items it receives from each process, not the total number of
items it receives.
.PP
Example 1: Gather 100 ints from every process in group to root.
.IP
.nf
\f[C]
MPI_Comm\ comm;
int\ gsize,sendarray[100];
int\ root,\ *rbuf;
//...

MPI_Comm_size(\ comm,\ &gsize);
rbuf\ =\ (int\ *)malloc(gsize*100*sizeof(int));

MPI_Gather(\ sendarray,\ 100,\ MPI_INT,\ rbuf,\ 100,\ MPI_INT,\ root,\ comm);
\f[]
.fi
.PP
Example 2: Previous example modified \[en] only the root allocates
memory for the receive buffer.
.IP
.nf
\f[C]
MPI_Comm\ comm;
int\ gsize,sendarray[100];
int\ root,\ myrank,\ *rbuf;
//...

MPI_Comm_rank(\ comm,\ myrank);
if\ (\ myrank\ ==\ root)\ {
\ \ \ \ MPI_Comm_size(\ comm,\ &gsize);
\ \ \ \ rbuf\ =\ (int\ *)malloc(gsize*100*sizeof(int));
}
MPI_Gather(\ sendarray,\ 100,\ MPI_INT,\ rbuf,\ 100,\ MPI_INT,\ root,\ comm);
\f[]
.fi
.PP
Example 3: Do the same as the previous example, but use a derived
datatype.
Note that the type cannot be the entire set of gsize * 100 ints since
type matching is defined pairwise between the root and each process in
the gather.
.IP
.nf
\f[C]
MPI_Comm\ comm;
int\ gsize,sendarray[100];
int\ root,\ *rbuf;
MPI_Datatype\ rtype;
//...

MPI_Comm_size(\ comm,\ &gsize);
MPI_Type_contiguous(\ 100,\ MPI_INT,\ &rtype\ );
MPI_Type_commit(\ &rtype\ );
rbuf\ =\ (int\ *)malloc(gsize*100*sizeof(int));
MPI_Gather(\ sendarray,\ 100,\ MPI_INT,\ rbuf,\ 1,\ rtype,\ root,\ comm);
\f[]
.fi
.SH Use Of In\-Place Option
.PP
When the communicator is an intracommunicator, you can perform a gather
operation in\-place (the output buffer is used as the input buffer).
Use the variable \f[C]MPI_IN_PLACE\f[] as the value of the root process
\f[C]sendbuf\f[].
In this case, \f[C]sendcount\f[] and \f[C]sendtype\f[] are ignored, and
the contribution of the root process to the gathered vector is assumed
to already be in the correct place in the receive buffer.
Note that \f[C]MPI_IN_PLACE\f[] is a special kind of value; it has the
same restrictions on its use as MPI_BOTTOM.
Because the in\-place option converts the receive buffer into a
send\-and\-receive buffer, a Fortran binding that includes
\f[C]INTENT\f[] must mark these as \f[C]INOUT\f[], not \f[C]OUT\f[].
.SH When Communicator Is An Inter\-Communicator
.PP
When the communicator is an inter\-communicator, the root process in the
first group gathers data from all the processes in the second group.
The first group defines the root process.
That process uses MPI_ROOT as the value of its \f[C]root\f[] argument.
The remaining processes use \f[C]MPI_PROC_NULL\f[] as the value of their
\f[C]root\f[] argument.
All processes in the second group use the rank of that root process in
the first group as the value of their \f[C]root\f[] argument.
The send buffer argument of the processes in the first group must be
consistent with the receive buffer argument of the root process in the
second group.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
See the MPI man page for a full list of MPI error codes.
.SH See Also
.PP
\f[C]MPI_Gatherv\f[](3) \f[C]MPI_Scatter\f[](3) \f[C]MPI_Scatterv\f[](3)
