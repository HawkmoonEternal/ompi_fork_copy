.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_Cart_shift" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Cart_shift\f[] \- Returns the shifted source and destination
ranks, given a shift direction and amount.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>

int\ MPI_Cart_shift(MPI_Comm\ comm,\ int\ direction,\ int\ disp,
\ \ \ \ int\ *rank_source,\ int\ *rank_dest)
\f[]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]

MPI_CART_SHIFT(COMM,\ DIRECTION,\ DISP,\ RANK_SOURCE,
\ \ \ \ \ \ \ \ RANK_DEST,\ IERROR)
\ \ \ \ INTEGER\ COMM,\ DIRECTION,\ DISP,\ RANK_SOURCE
\ \ \ \ INTEGER\ RANK_DEST,\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08

MPI_Cart_shift(comm,\ direction,\ disp,\ rank_source,\ rank_dest,\ ierror)
\ \ \ \ TYPE(MPI_Comm),\ INTENT(IN)\ ::\ comm
\ \ \ \ INTEGER,\ INTENT(IN)\ ::\ direction,\ disp
\ \ \ \ INTEGER,\ INTENT(OUT)\ ::\ rank_source,\ rank_dest
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]comm\f[] : Communicator with Cartesian structure (handle).
.IP \[bu] 2
\f[C]direction\f[] : Coordinate dimension of shift (integer).
.IP \[bu] 2
\f[C]disp\f[] : Displacement ( > 0: upward shift, < 0: downward shift)
(integer).
.SH Output Parameters
.IP \[bu] 2
\f[C]rank_source\f[] : Rank of source process (integer).
.IP \[bu] 2
\f[C]rank_dest\f[] : Rank of destination process (integer).
.IP \[bu] 2
\f[C]IERROR\f[] : Fortran only: Error status (integer).
.SH Description
.PP
If the process topology is a Cartesian structure, an
\f[C]MPI_Sendrecv\f[] operation is likely to be used along a coordinate
\f[C]direction\f[] to perform a shift of data.
As input, \f[C]MPI_Sendrecv\f[] takes the rank of a source process for
the receive, and the rank of a destination process for the send.
If the function \f[C]MPI_Cart_shift\f[] is called for a Cartesian
process group, it provides the calling process with the above
identifiers, which then can be passed to \f[C]MPI_Sendrecv\f[].
The user specifies the coordinate \f[C]direction\f[] and the size of the
step (positive or negative).
The function is local.
.PP
The \f[C]direction\f[] argument indicates the dimension of the shift,
i.e., the coordinate whose value is modified by the shift.
The coordinates are numbered from 0 to ndims\-1, where ndims is the
number of dimensions.
.PP
Note: The \f[C]direction\f[] argument is in the range [0, n\-1] for an
n\-dimensional Cartesian mesh.
.PP
Depending on the periodicity of the Cartesian group in the specified
coordinate \f[C]direction\f[], \f[C]MPI_Cart_shift\f[] provides the
identifiers for a circular or an end\-off shift.
In the case of an end\-off shift, the value \f[C]MPI_PROC_NULL\f[] may
be returned in \f[C]rank_source\f[] or \f[C]rank_dest\f[], indicating
that the source or the destination for the shift is out of range.
.PP
Example: The \f[C]comm\f[]unicator, \f[C]comm\f[], has a
two\-dimensional, periodic, Cartesian topology associated with it.
A two\-dimensional array of REALs is stored one element per process, in
variable A.
One wishes to skew this array, by shifting column i (vertically, i.e.,
along the column) by i steps.
.IP
.nf
\f[C]
!\ find\ process\ rank
\ \ \ \ CALL\ MPI_COMM_RANK(comm,\ rank,\ ierr)
!\ find\ Cartesian\ coordinates
\ \ \ \ CALL\ MPI_CART_COORDS(comm,\ rank,\ maxdims,\ coords,\ ierr)
!\ compute\ shift\ source\ and\ destination
\ \ \ \ CALL\ MPI_CART_SHIFT(comm,\ 0,\ coords(2),\ source,\ dest,\ ierr)
!\ skew\ array
\ \ \ \ CALL\ MPI_SENDRECV_REPLACE(A,\ 1,\ MPI_REAL,\ dest,\ 0,\ source,\ 0,\ comm,\ status,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ierr)
\f[]
.fi
.SH Note
.PP
In Fortran, the dimension indicated by DIRECTION = i has DIMS(i+1)
nodes, where DIMS is the array that was used to create the grid.
In C, the dimension indicated by direction = i is the dimension
specified by dims[i].
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
