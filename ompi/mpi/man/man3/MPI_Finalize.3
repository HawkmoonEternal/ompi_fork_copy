.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "MPI_Finalize" "3" "" "2022\-07\-05" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Finalize\f[] \- Terminates MPI execution environment.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include\ <mpi.h>

int\ MPI_Finalize()
\f[]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE\ MPI
!\ or\ the\ older\ form:\ INCLUDE\ \[aq]mpif.h\[aq]

MPI_FINALIZE(IERROR)
\ \ \ \ INTEGER\ IERROR
\f[]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE\ mpi_f08

MPI_Finalize(ierror)
\ \ \ \ INTEGER,\ OPTIONAL,\ INTENT(OUT)\ ::\ ierror
\f[]
.fi
.SH Output Parameter
.IP \[bu] 2
\f[C]IERROR\f[] : Fortran only: Error status (integer).
.SH Description
.PP
This routine cleans up all MPI states.
Once this routine is called, no MPI routine (not even \f[C]MPI_Init\f[])
may be called, except for \f[C]MPI_Get_version\f[],
\f[C]MPI_Initialized\f[], and \f[C]MPI_Finalized\f[].
Unless there has been a call to \f[C]MPI_Abort\f[], you must ensure that
all pending communications involving a process are complete before the
process calls \f[C]MPI_Finalize\f[].
If the call returns, each process may either continue local computations
or exit without participating in further communication with other
processes.
At the moment when the last process calls \f[C]MPI_Finalize\f[], all
pending sends must be matched by a receive, and all pending receives
must be matched by a send.
.PP
\f[C]MPI_Finalize\f[] is collective over all connected processes.
If no processes were spawned, accepted, or connected, then this means it
is collective over \f[C]MPI_COMM_WORLD\f[].
Otherwise, it is collective over the union of all processes that have
been and continue to be connected.
.SH Notes
.PP
All processes must call this routine before exiting.
All processes will still exist but may not make any further MPI calls.
\f[C]MPI_Finalize\f[] guarantees that all local actions required by
communications the user has completed will, in fact, occur before it
returns.
However, \f[C]MPI_Finalize\f[] guarantees nothing about pending
communications that have not been completed; completion is ensured only
by \f[C]MPI_Wait\f[], \f[C]MPI_Test,\f[] or \f[C]MPI_Request_free\f[]
combined with some other verification of completion.
.PP
For example, a successful return from a blocking communication operation
or from \f[C]MPI_Wait\f[] or \f[C]MPI_Test\f[] means that the
communication is completed by the user and the buffer can be reused, but
does not guarantee that the local process has no more work to do.
Similarly, a successful return from \f[C]MPI_Request_free\f[] with a
request handle generated by an \f[C]MPI_Isend\f[] nullifies the handle
but does not guarantee that the operation has completed.
The \f[C]MPI_Isend\f[] is complete only when a matching receive has
completed.
.PP
If you would like to cause actions to happen when a process finishes,
attach an attribute to \f[C]MPI_COMM_SELF\f[] with a callback function.
Then, when \f[C]MPI_Finalize\f[] is called, it will first execute the
equivalent of an \f[C]MPI_Comm_free\f[] on \f[C]MPI_COMM_SELF\f[].
This will cause the delete callback function to be executed on all keys
associated with \f[C]MPI_COMM_SELF\f[] in an arbitrary order.
If no key has been attached to \f[C]MPI_COMM_SELF\f[], then no callback
is invoked.
This freeing of \f[C]MPI_COMM_SELF\f[] happens before any other parts of
MPI are affected.
Calling \f[C]MPI_Finalized\f[] will thus return \[lq]false\[rq] in any
of these callback functions.
Once you have done this with \f[C]MPI_COMM_SELF\f[], the results of
\f[C]MPI_Finalize\f[] are not specified.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.SH See Also
.PP
\f[C]MPI_Init\f[](3) \f[C]MPI_Init_thread\f[](3)
\f[C]MPI_Initialized\f[](3) \f[C]MPI_Finalized\f[](3)
